common$GDSC@sensitivity$raw <- common$GDSC@sensitivity$raw[gdsc.filter$ok, , ]
common$GDSC@sensitivity$profiles <- common$GDSC@sensitivity$profiles[gdsc.filter$ok, ]
cells <- PharmacoGx::intersectList(phenoInfo(common$CCLE, "rna")$cellid, phenoInfo(common$GDSC, "rna2")$cellid, unique(sensitivityInfo(common$CCLE)$cellid), unique(sensitivityInfo(common$GDSC)$cellid))
cells <- setdiff(cells, snp.outliers)
common.clarified <- PharmacoGx::intersectPSet(pSets = list("CCLE"=common$CCLE, "GDSC"=common$GDSC), intersectOn = c("cell.lines", "drugs"), cells=cells)
save(common.clarified, file=myf)
} else{
load(myf)
}
myf <- file.path(saveres, "signatures_data.RData")
if(!file.exists(myf)){
drugs <- c("paclitaxel", "17-AAG", "PD-0325901", "AZD6244", "TAE684", "AZD0530", "PD-0332991", "Crizotinib", "PLX4720", "Nutlin-3", "lapatinib", "Nilotinib", "PHA-665752", "Erlotinib", "Sorafenib")
features <- intersect(rownames(featureInfo(CCLE.clarified, "rna")), rownames(featureInfo(GDSC.clarified, "rna2")))
save(drugs, features, common.clarified, file=myf)
} else{
load(myf)
}
### plotting all the common experiments between studies(Supplementary File 3)
pdf(file.path(saveres, "Supplementary_File_3.pdf"), height=15.5, width=12.5)
par(mfrow = c(4,3))
for (exp in rownames(sensitivityInfo(common.clarified$CCLE))) {
cell <- PharmacoGx::sensitivityInfo(common.clarified$CCLE)[exp, "cellid"]
drug <- PharmacoGx::sensitivityInfo(common.clarified$CCLE)[exp, "drugid"]
PharmacoGx::drugDoseResponseCurve(pSets=common.clarified, drug=drug, cellline=cell, plot.type="Fitted", ylim=c(0,130))
}
dev.off()
############remove noisy experiments and mislabeled cell lines (snp.outliers) from actual pSets
myf <- file.path(saveres, "PSets", "GDSC_clarified.RData")
if(!file.exists(myf)) {
gdsc.filter <- PharmacoGx:::filterNoisyCurves(GDSC, nthread=detectCores())
lapply(gdsc.filter, length)
#$noisy
#[1] 2315
#$ok
#[1] 77588
GDSC.clarified <- GDSC
GDSC.clarified@sensitivity$info <- GDSC.clarified@sensitivity$info[gdsc.filter$ok, ]
GDSC.clarified@sensitivity$raw <- GDSC.clarified@sensitivity$raw[gdsc.filter$ok, , ]
GDSC.clarified@sensitivity$profiles <- GDSC.clarified@sensitivity$profiles[gdsc.filter$ok, ]
cells <- cellNames(GDSC.clarified)
cells <- setdiff(cells, snp.outliers)
GDSC.clarified <- subsetTo(GDSC.clarified, cells=cells)
save(GDSC.clarified, file=myf)
} else {
load(myf)
}
myf <- file.path(saveres, "PSets", "CCLE_clarified.RData")
if(!file.exists(myf)) {
ccle.filter <- PharmacoGx:::filterNoisyCurves(CCLE, nthread=detectCores())
lapply(ccle.filter, length)
# $noisy
# [1] 123
#
# $ok
# [1] 11547
CCLE.clarified <- CCLE
CCLE.clarified@sensitivity$info <- CCLE.clarified@sensitivity$info[ccle.filter$ok, ]
CCLE.clarified@sensitivity$raw <- CCLE.clarified@sensitivity$raw[ccle.filter$ok, , ]
CCLE.clarified@sensitivity$profiles <- CCLE.clarified@sensitivity$profiles[ccle.filter$ok, ]
cells <- cellNames(CCLE.clarified)
cells <- setdiff(cells, snp.outliers)
CCLE.clarified <- subsetTo(CCLE.clarified, cells=cells)
save(CCLE.clarified, file=myf)
}else {
load(myf)
}
myf <- file.path(saveres, "signatures_data.RData")
if(!file.exists(myf)){
drugs <- c("paclitaxel", "17-AAG", "PD-0325901", "AZD6244", "TAE684", "AZD0530", "PD-0332991", "Crizotinib", "PLX4720", "Nutlin-3", "lapatinib", "Nilotinib", "PHA-665752", "Erlotinib", "Sorafenib")
features <- intersect(rownames(featureInfo(CCLE.clarified, "rna")), rownames(featureInfo(GDSC.clarified, "rna2")))
save(drugs, features, common.clarified, file=myf)
} else{
load(myf)
}
### plotting all internal replicates in GDSC
replicates <- PharmacoGx::sensitivityInfo(GDSC.clarified)[which(sensitivityInfo(GDSC.clarified)$drugid == "AZD6482"),]
replicates <- replicates[which(duplicated(replicates$cellid)),] #577 it was 617 before removing the noisy ones
ABC <- NULL
for (exps in 1:nrow(replicates)) {
cell <- replicates[exps, "cellid"]
drug <- replicates[exps, "drugid"]
exp <-   which(PharmacoGx::sensitivityInfo(GDSC.clarified)$cellid==cell & sensitivityInfo(GDSC.clarified)$drugid==drug)
ABC <- c(ABC, PharmacoGx::computeABC(conc1 = GDSC.clarified@sensitivity$raw[exp[1],,"Dose"], conc2 = GDSC.clarified@sensitivity$raw[exp[2],,"Dose"], viability1 = GDSC.clarified@sensitivity$raw[exp[1],,"Viability"], viability2 = GDSC.clarified@sensitivity$raw[exp[2],,"Viability"]))
}
biological_replicates_ABC <- ABC[which(!is.na(ABC))]
pdf(file.path(saveres, "Supplementary_File_4.pdf"), height=15.5, width=12.5)
par(mfrow = c(4,3))
for (i in order(ABC, decreasing = T)) {
exp <- rownames(replicates)[i]
cell <- replicates[exp, "cellid"]
drug <- replicates[exp, "drugid"]
PharmacoGx::drugDoseResponseCurve(pSets=GDSC.clarified, drug=drug, cellline=cell, summarize.replicates = FALSE, plot.type = "Fitted", mycol=RColorBrewer::brewer.pal(n=4, name="Set1")[c(3,4)])
legend("bottomleft", legend = sprintf("ABC= %s", round(ABC[i], digits=2)), bty="n")
}
dev.off()
##boxplot of ABC across celllines and across drugs
ABC <- NULL
for (exp.ccle in rownames(sensitivityInfo(common.clarified$CCLE))) {
cell <- PharmacoGx::sensitivityInfo(common.clarified$CCLE)[exp.ccle, "cellid"]
drug <- PharmacoGx::sensitivityInfo(common.clarified$CCLE)[exp.ccle, "drugid"]
exp.gdsc <-   rownames(PharmacoGx::sensitivityInfo(common.clarified$GDSC))[which(PharmacoGx::sensitivityInfo(common.clarified$GDSC)$cellid==cell & PharmacoGx::sensitivityInfo(common.clarified$GDSC)$drugid==drug)]
ABC <- c(ABC, PharmacoGx::computeABC(conc1 = common.clarified$CCLE@sensitivity$raw[exp.ccle,,"Dose"],
conc2 = common.clarified$GDSC@sensitivity$raw[exp.gdsc,,"Dose"],
viability1 = common.clarified$CCLE@sensitivity$raw[exp.ccle,,"Viability"],
viability2 = common.clarified$GDSC@sensitivity$raw[exp.gdsc,,"Viability"]))
}
names(ABC) <- rownames(PharmacoGx::sensitivityInfo(common.clarified$CCLE))
ABC <- cbind(ABC, "cellid"=PharmacoGx::sensitivityInfo(common.clarified$CCLE)[names(ABC),"cellid"], "drugid"=PharmacoGx::sensitivityInfo(common.clarified$CCLE)[names(ABC),"drugid"])
Inter_studies_ABC <- ABC[which(!is.na(ABC[,"ABC"])),"ABC"]
###wilcoxon test
biological_replicates_ABC <- as.numeric(biological_replicates_ABC)
Inter_studies_ABC <- as.numeric(Inter_studies_ABC)
tt <- matrix(NA, ncol=2, nrow=max(length(Inter_studies_ABC), length(biological_replicates_ABC)))
colnames(tt) <- c("Intra", "Inter")
tt[1:length(biological_replicates_ABC),"Intra"] <- biological_replicates_ABC
tt[1:length(Inter_studies_ABC),"Inter"] <- Inter_studies_ABC
pdf(file.path(saveres, "inter_intra_abc.pdf"), height=7, width=7)
par(mar=c(9,5,5,2))
boxplot(tt, las = 2, col = "gray", cex.lab=1, cex.axis=1, pch=19, ylab="ABC", outpch=20, outcex=0.5)
dev.off()
test <- wilcox.test(Inter_studies_ABC, biological_replicates_ABC, paired=FALSE)
test$p.value
###box plot for ABC
tt <- as.data.frame(matrix(NA, ncol=length(drugNames(common.clarified$CCLE)), nrow=length(cellNames(common.clarified$CCLE))))
colnames(tt)=drugNames(common.clarified$CCLE)
rownames(tt)=cellNames(common.clarified$CCLE)
for (ii in 1:nrow(ABC)) {
tt[ABC[ii, "cellid"], ABC[ii, "drugid"]] <- as.numeric(ABC[ii, "ABC"])
}
emp.cell <- NULL
for(i in 1:nrow(tt)) {
if(all(is.na(tt[i,]))) {
emp.cell <- c(emp.cell,i)
}
}
if(!is.null(emp.cell)){
tt <- tt[-emp.cell,]
}
##drugs
pdf(file.path(saveres, "drugs_abc.pdf"), height=5, width=10)
par(mar=c(9,5,5,2))
oo <- order(apply(tt, 2, median, na.rm=TRUE), decreasing=TRUE)
boxplot(tt[,oo], las = 2, col = "gray", cex.lab=1, cex.axis=1, pch=19, ylab="ABC", outpch=20, outcex=0.5)
dev.off()
##cells
pdf(file.path(saveres, "cells_ABC.pdf"), height=5, width=20)
par(mar=c(9,5,5,2))
oo <- order(apply(tt, 1, median, na.rm=TRUE), decreasing=TRUE)
boxplot(t(tt[oo,]), las = 2, col = "gray", cex.lab=.5, cex.axis=.5, pch='.', ylab="ABC", outpch=20, outcex=0.5)
dev.off()
##histogram
ttt <- do.call(c,tt)
pdf(file.path(saveres, "ABC_hist.pdf"),width=5,height=5)
hist(ttt,breaks=50, main="",xlab="ABC")
dev.off()
## since all the kept experiments are common experiments it's just needed to check for one of the studies
unique(PharmacoGx::sensitivityInfo(common.clarified$GDSC)[which(PharmacoGx::sensitivityInfo(common.clarified$GDSC)$cellid %in% snp.outliers),"cellid"])
sort(unique(PharmacoGx::sensitivityInfo(common.clarified$GDSC)[which(PharmacoGx::sensitivityInfo(common.clarified$GDSC)$cellid %in% snp.outliers),"drugid"]))
## min and max concentrations tested in both datasets
range.concentration.gdsc <- range.concentration.ccle <- range.concentration <- NULL
## GDSC
for (i in 1:nrow(drugInfo(GDSC.clarified))) {
## GDSC
dix <- !is.na(sensitivityInfo(GDSC.clarified)[ , "drugid"]) & sensitivityInfo(GDSC.clarified)[ , "drugid"] == rownames(drugInfo(GDSC.clarified))[i]
tt <- GDSC.clarified@sensitivity$raw[dix, ,"Dose"]
range.concentration.gdsc <- rbind(range.concentration.gdsc, c(min(as.numeric(tt[ , 1]), na.rm=TRUE), max(as.numeric(tt[ , ncol(tt)]), na.rm=TRUE)))
}
dimnames(range.concentration.gdsc) <- list(rownames(drugInfo(GDSC.clarified)), c("Dose.min", "Dose.max"))
## CCLE
for (i in 1:nrow(drugInfo(CCLE.clarified))) {
## CCLE
dix <- !is.na(sensitivityInfo(CCLE.clarified)[ , "drugid"]) & sensitivityInfo(CCLE.clarified)[ , "drugid"] == rownames(drugInfo(CCLE.clarified))[i]
tt <- CCLE.clarified@sensitivity$raw[dix, ,"Dose"]
range.concentration.ccle <- rbind(range.concentration.ccle, c(min(as.numeric(tt[ , 1]), na.rm=TRUE), max(as.numeric(tt[ , ncol(tt)]), na.rm=TRUE)))
}
dimnames(range.concentration.ccle) <- list(rownames(drugInfo(CCLE.clarified)), c("Dose.min", "Dose.max"))
## distribution of expression data
grDevices::pdf(file=file.path(saveres, sprintf("distribution_rna.pdf")), height=4, width=12)
par(mfrow=c(2, 3), cex=0.8, las=1)
yylim <- c(0, 0.55)
## common genes
gix <- paste("geneid", intersectList(list(featureInfo(pSet=common.clarified$GDSC, mDataType="rna2")[ , "EnsemblGeneId"], featureInfo(pSet=common.clarified$CCLE, mDataType="rna")[ , "EnsemblGeneId"], featureInfo(pSet=common.clarified$CCLE, mDataType="rnaseq")[ , "EnsemblGeneId"])), sep=".")
mdd <- molecularProfiles(pSet=common.clarified$GDSC, mDataType="rna2")
fdd <- paste("geneid", featureInfo(pSet=common.clarified$GDSC, mDataType="rna2")[ , "EnsemblGeneId"], sep=".")
mdd <- mdd[!is.na(fdd) & is.element(fdd, gix), , drop=FALSE]
## identify cutoff
myf <- file.path(saveres, "mclust_rna_gdsc.RData")
if (!file.exists(myf)) {
mclust.rna.gdsc <- Mclust(data=as.numeric(mdd), G=2, modelNames="V")
cutoff.rna.gdsc <- max(1, ceiling(qnorm(p=0.1, mean=mclust.rna.gdsc$parameters$mean[2], sd=sqrt(mclust.rna.gdsc$parameters$variance$sigmasq[2]))))
save(list=c("mclust.rna.gdsc", "cutoff.rna.gdsc"), compress=TRUE, file=myf)
} else {
load(myf)
}
hist(as.numeric(mdd), breaks=100, main="Distribution of GDSC Affymetrix data", freq=FALSE, xlab="Affymetrix HG-U219 expression values", ylim=yylim)
abline(v=cutoff.rna.gdsc, col="red", lty=2, lwd=1)
mdd <- molecularProfiles(pSet=common.clarified$CCLE, mDataType="rna")
fdd <- paste("geneid", featureInfo(pSet=common.clarified$CCLE, mDataType="rna")[ , "EnsemblGeneId"], sep=".")
mdd <- mdd[!is.na(fdd) & is.element(fdd, gix), , drop=FALSE]
## identify cutoff
myf <- file.path(saveres, "mclust_rna_ccle.RData")
if (!file.exists(myf)) {
mclust.rna.ccle <- Mclust(data=as.numeric(mdd), G=2, modelNames="V")
cutoff.rna.ccle <- max(1, ceiling(qnorm(p=0.1, mean=mclust.rna.ccle$parameters$mean[2], sd=sqrt(mclust.rna.ccle$parameters$variance$sigmasq[2]))))
save(list=c("mclust.rna.ccle", "cutoff.rna.ccle"), compress=TRUE, file=myf)
} else {
load(myf)
}
hist(as.numeric(mdd), breaks=100, main="Distribution of CCLE Affymetrix data", freq=FALSE, xlab="Affymetrix HG-U133PLUS2 expression values", ylim=yylim)
abline(v=cutoff.rna.ccle, col="red", lty=2, lwd=1)
mdd <- molecularProfiles(pSet=common.clarified$CCLE, mDataType="rnaseq")
fdd <- paste("geneid", featureInfo(pSet=common.clarified$CCLE, mDataType="rnaseq")[ , "EnsemblGeneId"], sep=".")
mdd <- mdd[!is.na(fdd) & is.element(fdd, gix), , drop=FALSE]
## identify cutoff
myf <- file.path(saveres, "mclust_rnaseq_ccle.RData")
if (!file.exists(myf)) {
mclust.rnaseq.ccle <- Mclust(data=as.numeric(mdd), G=2, modelNames="V")
cutoff.rnaseq.ccle <- max(1, ceiling(qnorm(p=0.1, mean=mclust.rnaseq.ccle$parameters$mean[2], sd=sqrt(mclust.rnaseq.ccle$parameters$variance$sigmasq[2]))))
save(list=c("mclust.rnaseq.ccle", "cutoff.rnaseq.ccle"), compress=TRUE, file=myf)
} else {
load(myf)
}
hist(as.numeric(mdd), breaks=100, main="Distribution of CCLE RNA-seq data", freq=FALSE, xlab="Illumina RNA-seq expression values", ylim=yylim)
abline(v=cutoff.rnaseq.ccle, col="red", lty=2, lwd=1)
## distribution of cnv data
hist(as.numeric(molecularProfiles(pSet=common.clarified$CCLE, mDataType="cnv")), breaks=150, main="Distribution of CCLE CNV data", freq=FALSE, xlab="CNV ratios")
abline(v=cutoff.cnv.amplification, col="red", lty=2)
abline(v=cutoff.cnv.deletion, col="red", lty=2)
hist(as.numeric(molecularProfiles(pSet=common.clarified$GDSC, mDataType="cnv")), breaks=150, main="Distribution of GDSC CNV data", freq=FALSE, xlab="CNV ratios")
abline(v=cutoff.cnv.amplification, col="red", lty=2)
abline(v=cutoff.cnv.deletion, col="red", lty=2)
dev.off()
## distribution of sensitivity data
grDevices::pdf(file=file.path(saveres, sprintf("distribution_sensitivity.pdf")), height=8, width=8)
par(mfrow=c(2, 2), cex=0.8, las=1)
hist(as.numeric(summarizeSensitivityProfiles(pSet=common.clarified$GDSC, sensitivity.measure="auc_published", summary.stat="median")), breaks=50, main="Distribution of GDSC AUC data", freq=FALSE, xlab="AUC values as published", xlim=c(0, 1))
abline(v=auc.cutoff, col="red", lty=2)
abline(v=auc.cytotoxic.cutoff, col="orange", lty=2)
hist(as.numeric(summarizeSensitivityProfiles(pSet=common.clarified$CCLE, sensitivity.measure="auc_published", summary.stat="median")), breaks=50, main="Distribution of CCLE AUC data", freq=FALSE, xlab="AUC values as published", xlim=c(0, 1))
abline(v=auc.cutoff, col="red", lty=2)
abline(v=auc.cytotoxic.cutoff, col="orange", lty=2)
hist(- log10(as.numeric(summarizeSensitivityProfiles(pSet=common.clarified$GDSC, sensitivity.measure="ic50_published", summary.stat="median") / 1000)), breaks=50, main="Distribution of GDSC IC50 data", freq=FALSE, xlab="- log10(IC50 nanoMolar) values as published", xlim=c(0, 8))
abline(v=ic50.cutoff, col="red", lty=2)
abline(v=ic50.cytotoxic.cutoff, col="orange", lty=2)
hist(- log10(as.numeric(summarizeSensitivityProfiles(pSet=common.clarified$CCLE, sensitivity.measure="ic50_published", summary.stat="median")) / 1000), breaks=50, main="Distribution of CCLE IC50 data", freq=FALSE, xlab="- log10(IC50 nanoMolar) values as published", xlim=c(0, 8))
abline(v=ic50.cutoff, col="red", lty=2)
abline(v=ic50.cytotoxic.cutoff, col="orange", lty=2)
dev.off()
#################################################
## MAD of drug sensitivity data
#################################################
## MAD of cytotoxic drugs vs the rest in full studies
drug.mad.gdsc <- apply(PharmacoGx::summarizeSensitivityProfiles(pSet=GDSC.clarified, sensitivity.measure="auc_published", summary.stat="median"), 1, mad, na.rm=TRUE)
iix.gdsc <- factor(!is.na(PharmacoGx::drugInfo(GDSC.clarified)[ , "Drug.class.II"]) & PharmacoGx::drugInfo(GDSC.clarified)[ , "Drug.class.II"] == "Cytotoxic", levels=c(TRUE, FALSE))
levels(iix.gdsc) <- c("Cytotoxic", "Targeted")
drug.mad.ccle <- apply(PharmacoGx::summarizeSensitivityProfiles(pSet=CCLE.clarified, sensitivity.measure="auc_published", summary.stat="median"), 1, mad, na.rm=TRUE)
iix.ccle <- factor(!is.na(PharmacoGx::drugInfo(CCLE.clarified)[ , "Class"]) & PharmacoGx::drugInfo(CCLE.clarified)[ , "Class"] == "Cytotoxic", levels=c(TRUE, FALSE))
levels(iix.ccle) <- c("Cytotoxic", "Targeted")
## find optimal cutoff to descriminate cytotoxic vs targeted drugs based on AUC MAD
rroc.gdsc <- pROC::roc(formula=drug.type ~ drug.mad, data=data.frame("drug.mad"=drug.mad.gdsc, "drug.type"=iix.gdsc))
threshold.gdsc <- pROC::coords(roc=rroc.gdsc, x="best", best.method="youden")[1]
rroc.ccle <- pROC::roc(formula=drug.type ~ drug.mad, data=data.frame("drug.mad"=drug.mad.ccle, "drug.type"=iix.ccle))
threshold.ccle <- pROC::coords(roc=rroc.ccle, x="best", best.method="youden")[1]
mad.cytotoxic.cutoff <- round(mean(threshold.gdsc, threshold.ccle) * 100) / 100
pdf(file.path(saveres, "auc_mad_vs_cytotoxic_full.pdf"), width=10, height=5)
par(mfrow=c(1, 2), mar=c(5, 4, 3, 2) + 0.1)
yylim <- c(0, ceiling(max(c(drug.mad.gdsc, drug.mad.ccle), na.rm=TRUE) * 10) / 10)
boxplot(drug.mad.gdsc ~ iix.gdsc, ylim=yylim, col="lightgrey", border="black", pars=list(outcol="black", outpch=20, outcex=0.5), ylab="AUC published (GDSC)", main="")
abline(h=mad.cytotoxic.cutoff, lty=2, col="red")
mtext(side=3, at=par("usr")[1] - 0.33, text=LETTERS[1], line=2, font=2, cex=0.8)
boxplot(drug.mad.ccle ~ iix.ccle, ylim=yylim, col="lightgrey", border="black", pars=list(outcol="black", outpch=20, outcex=0.5), ylab="AUC published (CCLE)", main="")
abline(h=mad.cytotoxic.cutoff, lty=2, col="red")
mtext(side=3, at=par("usr")[1] - 0.33, text=LETTERS[2], line=2, font=2, cex=0.8)
dev.off()
## MAD of AUC in common cell lines in both studies
drug.mad.gdsc <- apply(summarizeSensitivityProfiles(pSet=common.clarified$GDSC, sensitivity.measure="auc_published", summary.stat="median"), 1, mad, na.rm=TRUE)[drugix]
drug.mad.ccle <- apply(summarizeSensitivityProfiles(pSet=common.clarified$CCLE, sensitivity.measure="auc_published", summary.stat="median"), 1, mad, na.rm=TRUE)[drugix]
pdf(file.path(saveres, "auc_mad_vs_mad_common.pdf"), width=5, height=5)
par(mar=c(5, 4, 1, 2) + 0.1, cex=0.8)
xxlim <- c(floor(min(drug.mad.gdsc, na.rm=TRUE) * 1000) / 1000, ceiling(max(drug.mad.gdsc, na.rm=TRUE) * 1200) / 1000)
yylim <- c(floor(min(drug.mad.ccle, na.rm=TRUE) * 1000) / 1000, ceiling(max(drug.mad.ccle, na.rm=TRUE) * 1200) / 1000)
llim <- c(min(xxlim[1], yylim[1]), max(xxlim[2], yylim[2]))
plot(x=drug.mad.gdsc, y=drug.mad.ccle, xlim=llim, ylim=llim, pch=20, col=blues9[7], xlab="MAD of AUC published (GDSC)", ylab="MAD of AUC published (CCLE)")
abline(a=0, b=1, col="darkgrey", lwd=0.5)
abline(h=mad.cytotoxic.cutoff, col="red", lty=2, lwd=0.5)
abline(v=mad.cytotoxic.cutoff, col="red", lty=2, lwd=0.5)
text(x=drug.mad.gdsc, y=drug.mad.ccle, labels=drugix, cex=0.7, font=1, srt=45, pos=4)
# wordcloud::textplot(x=drug.mad.gdsc, y=drug.mad.ccle, words=drugix, new=FALSE, cex=0.8, srt=45)
dev.off()
myf <- file.path(saveres, "auc_ic50_published_recomputed.RData")
if (!file.exists(myf)) {
## GDSC AUC
x0.gdsc <- PharmacoGx::summarizeSensitivityProfiles(pSet=GDSC.clarified, sensitivity.measure="auc_published", summary.stat="median")
x1.gdsc <- PharmacoGx::summarizeSensitivityProfiles(pSet=GDSC.clarified, sensitivity.measure="auc_recomputed", summary.stat="median")
## GDSC IC50
xx0.gdsc <- PharmacoGx::summarizeSensitivityProfiles(pSet=GDSC.clarified, sensitivity.measure="ic50_published", summary.stat="median")
xx1.gdsc <- summarizeSensitivityProfiles(pSet=GDSC.clarified, sensitivity.measure="ic50_recomputed", summary.stat="median")
for (i in 1:nrow(xx0.gdsc)) {
## truncate ic50= and ic50=Inf by the min and max concentrations tested in each study
## ic50 = 0 when the drug dose-response curve starts below 50% viability
## ic50 = Inf when 50% viability is never reached
xx0.gdsc.i <- xx0.gdsc[i, ]
xx0.gdsc.i[xx0.gdsc.i < range.concentration.gdsc[i, 1]] <- range.concentration.gdsc[i, 1]
xx0.gdsc.i[xx0.gdsc.i > range.concentration.gdsc[i, 2]] <- range.concentration.gdsc[i, 2]
xx0.gdsc[i, ] <- - log10(xx0.gdsc.i / 1000)
xx1.gdsc.i <- xx1.gdsc[i, ]
xx1.gdsc.i[xx1.gdsc.i < range.concentration.gdsc[i, 1]] <- range.concentration.gdsc[i, 1]
xx1.gdsc.i[xx1.gdsc.i > range.concentration.gdsc[i, 2]] <- range.concentration.gdsc[i, 2]
xx1.gdsc[i, ] <- - log10(xx1.gdsc.i / 1000)
}
## CCLE AUC
x0.ccle <- PharmacoGx::summarizeSensitivityProfiles(pSet=CCLE.clarified, sensitivity.measure="auc_published", summary.stat="median")
x1.ccle <- PharmacoGx::summarizeSensitivityProfiles(pSet=CCLE.clarified, sensitivity.measure="auc_recomputed", summary.stat="median")
## CCLE IC50
xx0.ccle <- PharmacoGx::summarizeSensitivityProfiles(pSet=CCLE.clarified, sensitivity.measure="ic50_published", summary.stat="median")
xx1.ccle <- PharmacoGx::summarizeSensitivityProfiles(pSet=CCLE.clarified, sensitivity.measure="ic50_recomputed", summary.stat="median")
for (i in 1:nrow(xx0.ccle)) {
## truncate ic50= and ic50=Inf by the min and max concentrations tested in each study
## ic50 = 0 when the drug dose-response curve starts below 50% viability
## ic50 = Inf when 50% viability is never reached
xx0.ccle.i <- xx0.ccle[i, ]
xx0.ccle.i[xx0.ccle.i < range.concentration.ccle[i, 1]] <- range.concentration.ccle[i, 1]
xx0.ccle.i[xx0.ccle.i > range.concentration.ccle[i, 2]] <- range.concentration.ccle[i, 2]
xx0.ccle[i, ] <- - log10(xx0.ccle.i / 1000)
xx1.ccle.i <- xx1.ccle[i, ]
xx1.ccle.i[xx1.ccle.i < range.concentration.ccle[i, 1]] <- range.concentration.ccle[i, 1]
xx1.ccle.i[xx1.ccle.i > range.concentration.ccle[i, 2]] <- range.concentration.ccle[i, 2]
xx1.ccle[i, ] <- - log10(xx1.ccle.i / 1000)
}
dd <- list("GDSC.AUC.PUBLISHED"=data.frame(x0.gdsc, check.names=FALSE), "GDSC.AUC.RECOMPUTED"=data.frame(x1.gdsc, check.names=FALSE), "GDSC.IC50.PUBLISHED"=data.frame(xx0.gdsc, check.names=FALSE), "GDSC.IC50.RECOMPUTED"=data.frame(xx1.gdsc, check.names=FALSE), "CCLE.AUC.PUBLISHED"=data.frame(x0.ccle, check.names=FALSE), "CCLE.AUC.RECOMPUTED"=data.frame(x1.ccle, check.names=FALSE), "CCLE.IC50.PUBLISHED"=data.frame(xx0.ccle, check.names=FALSE), "CCLE.IC50.RECOMPUTED"=data.frame(xx1.ccle, check.names=FALSE))
WriteXLS::WriteXLS(x="dd", row.names=TRUE, ExcelFileName=file.path(saveres, "auc_ic50_published_recomputed.xlsx"))
save(list=c("x0.gdsc", "x1.gdsc", "xx0.gdsc", "xx1.gdsc", "x0.ccle", "x1.ccle", "xx0.ccle", "xx1.ccle"), compress=TRUE, file=myf)
} else {
load(myf)
}
grDevices::pdf(file=file.path(saveres, sprintf("sensitivity_published_recomputed.pdf")), height=10, width=10)
par(mfrow=c(2, 2), mar=c(5, 4, 3, 2) + 0.1, cex=0.8, las=1)
mylim <- c(0, 1)
mysub <- NULL
myScatterPlot(x=as.numeric(x0.gdsc), y=as.numeric(x1.gdsc), method=c("transparent"), transparency=0.05, pch=16, minp=50, xlim=mylim, ylim=mylim, main="Published vs. recomputed AUC values in GDSC", cex.sub=0.7, sub=mysub, xlab="Published AUC in GDSC", ylab="Recomputed AUC in GDSC")
tt <- cor.test(x=as.numeric(x0.gdsc), y=as.numeric(x1.gdsc), method="spearman", use="complete.obs", exact=FALSE)
legend("bottomright", legend=sprintf("SCC = %.2g", tt$estimate), col=c("white"), pch=NA, bty="n", cex=1.2)
mtext(side=3, at=par("usr")[1]-0.13, text=LETTERS[1], line=2, font=2, cex=0.8)
mylim <- c(0, 1)
mysub <- NULL
myScatterPlot(x=as.numeric(x0.ccle), y=as.numeric(x1.ccle), method=c("transparent"), transparency=0.05, pch=16, minp=50, xlim=mylim, ylim=mylim, main="Published vs. recomputed AUC values in CCLE", cex.sub=0.7, sub=mysub, xlab="Piblished AUC in CCLE", ylab="Recomputed AUC in CCLE")
tt <- cor.test(x=as.numeric(x0.ccle), y=as.numeric(x1.ccle), method="spearman", use="complete.obs", exact=FALSE)
legend("bottomright", legend=sprintf("SCC = %.2g", tt$estimate), col=c("white"), pch=NA, bty="n", cex=1.2)
mtext(side=3, at=par("usr")[1]-0.11, text=LETTERS[2], line=2, font=2, cex=0.8)
mylim <- range(c(xx0.gdsc, xx1.gdsc), na.rm=TRUE)
mysub <- NULL
myScatterPlot(x=as.numeric(xx0.gdsc), y=as.numeric(xx1.gdsc), method=c("transparent"), transparency=0.05, pch=16, minp=50, xlim=mylim, ylim=mylim, main="Published vs. recomputed IC50 values in GDSC", cex.sub=0.7, sub=mysub, xlab="- log10(published IC50) in GDSC", ylab="- log10(recomputed IC50) in GDSC")
tt <- cor.test(x=as.numeric(xx0.gdsc), y=as.numeric(xx1.gdsc), method="spearman", use="complete.obs", exact=FALSE)
legend("bottomright", legend=sprintf("SCC = %.2g", tt$estimate), col=c("white"), pch=NA, bty="n", cex=1.2)
mtext(side=3, at=par("usr")[1]-1, text=LETTERS[3], line=2, font=2, cex=0.8)
mylim <- range(c(xx0.ccle, xx1.ccle), na.rm=TRUE)
mysub <- NULL
myScatterPlot(x=as.numeric(xx0.ccle), y=as.numeric(xx1.ccle), method=c("transparent"), transparency=0.05, pch=16, minp=50, xlim=mylim, ylim=mylim, main="Published vs. recomputed IC50 values in CCLE", cex.sub=0.7, sub=mysub, xlab="- log10(published IC50) in CCLE", ylab="- log10(recomputed IC50) in CCLE")
tt <- cor.test(x=as.numeric(xx0.ccle), y=as.numeric(xx1.ccle), method="spearman", use="complete.obs", exact=FALSE)
legend("bottomright", legend=sprintf("SCC = %.2g", tt$estimate), col=c("white"), pch=NA, bty="n", cex=1.2)
mtext(side=3, at=par("usr")[1]-0.5, text=LETTERS[4], line=2, font=2, cex=0.8)
dev.off()
################################################
## consistency statistics per drug
################################################
consisn <- NULL
########################
## AUC as published
########################
auc.gdsc.common <- PharmacoGx::summarizeSensitivityProfiles(pSet=common.clarified$GDSC, sensitivity.measure="auc_published", summary.stat="median")
auc.ccle.common <- PharmacoGx::summarizeSensitivityProfiles(pSet=common.clarified$CCLE, sensitivity.measure="auc_published", summary.stat="median")
## compute consistency for auc published
myf <- file.path(saveres, sprintf("auc_%s_consistency.RData", "published"))
if (!file.exists(myf)) {
consis <- computeConsistencySensitivity(x=auc.gdsc.common, y=auc.ccle.common, type="auc", drugs=drug.cytotoxic, cutoff=auc.cutoff, cutoff.cytotoxic=auc.cytotoxic.cutoff)
save(list=c("consis"), compress=TRUE, file=myf)
} else {
load(myf)
}
consisn <- c(consisn, list("AUC.PUBLISHED"=data.frame(consis[ , , "estimate"], check.names=FALSE)))
## scatterplots
grDevices::pdf(file=file.path(saveres, sprintf("auc_%s_bin_lines.pdf", "published")), height=13, width=12)
par(mfrow=c(4, 4), mar=c(5, 4, 3, 2) + 0.1, cex=0.8, las=1)
for (i in drugix) {
## binarization
cc <- ifelse(drug.cytotoxic[i] == 1, auc.cytotoxic.cutoff, auc.cutoff)
auc.gdsc.common.bin <- factor(ifelse(auc.gdsc.common[i, ] > cc, "sensitive", "resistant"), levels=c("resistant","sensitive"))
auc.ccle.common.bin <- factor(ifelse(auc.ccle.common[i, ] > cc, "sensitive", "resistant"), levels=c("resistant","sensitive"))
ccix <- complete.cases(auc.gdsc.common[i, ], auc.ccle.common[i, ])
# mylim <- range(c(auc.gdsc.common[i, ccix], auc.ccle.common[i, ccix]), na.rm=TRUE)
# if (mylim[2] < (auc.cutoff + 0.1)) {
#  mylim[2] <- ceiling(auc.cutoff + 0.1)
# }
# if (mylim[1] > (auc.cutoff - 0.1)) {
#  mylim[1] <- floor(auc.cutoff - 0.1)
# }
mylim <- c(0, 1)
mycol <- rep("#2B83BA", length(auc.gdsc.common.bin))
mycol[complete.cases(auc.gdsc.common.bin, auc.ccle.common.bin) & auc.gdsc.common.bin == "resistant" & auc.ccle.common.bin == "resistant"] <- gplots::col2hex("#D7191C")
mycol[complete.cases(auc.gdsc.common.bin, auc.ccle.common.bin) & auc.gdsc.common.bin == "sensitive" & auc.ccle.common.bin == "resistant"] <- gplots::col2hex("#FDAE61")
mycol[complete.cases(auc.gdsc.common.bin, auc.ccle.common.bin) & auc.gdsc.common.bin == "resistant" & auc.ccle.common.bin == "sensitive"] <- gplots::col2hex("#ABDDA4")
# mysub <- sprintf("PCC=%.2g(%.2g), SCC=%.2g(%.2g), DXY=%.2g(%.2g)\nMCC=%.2g, CRAMERV=%.2g, INFORMEDNESS=%.2g", consis[i, "pcc.full", "estimate"], consis[i, "pcc.sens", "estimate"], consis[i, "scc.full", "estimate"], consis[i, "scc.sens", "estimate"], consis[i, "dxy.full", "estimate"], consis[i, "dxy.sens", "estimate"], consis[i, "mcc", "estimate"], consis[i, "cramerv", "estimate"], consis[i, "inform", "estimate"])
mysub <- NULL
myScatterPlot(x=auc.gdsc.common[i, ], y=auc.ccle.common[i, ], method=c("transparent"), transparency=0.50, pch=16, minp=50, col=mycol, xlim=mylim, ylim=mylim, main=i, cex.sub=0.7, sub=mysub, xlab="AUC GDSC", ylab="AUC CCLE")
abline(v=cc, col="grey", lty=2)
abline(h=cc, col="grey", lty=2)
## add diagonal line
abline(a=0, b=1, col="grey", lty=1, lwd=0.5)
}
## legend
plot.new()
par(mar=c(0.1, 0.1, 0.1, 0.1))
legend("center", legend=c("Both sensitive", "", "Both resistant", "", "GDSC sensitive / CCLE resistant", "", "GDSC resistant / CCLE sensitive"), col=c("#2B83BA", "white", "#D7191C", "white", "#FDAE61", "white", "#ABDDA4"), pch=16, bty="n", cex=1, pt.cex=1.5)
dev.off()
auc.published.consistency <- consis[drugix, , , drop=FALSE]
## save consistency statistics
xt <- auc.published.consistency[ , unlist(consistency.stats), "estimate"]
colnames(xt) <- toupper(colnames(xt))
xtable::print.xtable(xtable::xtable(xt, digits=2), include.rownames=TRUE, floating=FALSE, table.placement="!h", file=file.path(saveres, "auc_published_consistency.tex"), append=FALSE)
########################
## AUC recomputed
########################
auc.gdsc.common <- summarizeSensitivityProfiles(pSet=common.clarified$GDSC, sensitivity.measure="auc_recomputed", summary.stat="median")
auc.ccle.common <- summarizeSensitivityProfiles(pSet=common.clarified$CCLE, sensitivity.measure="auc_recomputed", summary.stat="median")
myf <- file.path(saveres, sprintf("auc_%s_consistency.RData", "recomputed"))
if (!file.exists(myf)) {
consis <- computeConsistencySensitivity(x=auc.gdsc.common, y=auc.ccle.common, type="auc", drugs=drug.cytotoxic, cutoff=auc.cutoff, cutoff.cytotoxic=auc.cytotoxic.cutoff)
save(list=c("consis"), compress=TRUE, file=myf)
} else {
load(myf)
}
consisn <- c(consisn, list("AUC.RECOMPUTED"=data.frame(consis[ , , "estimate"], check.names=FALSE)))
## scatterplots
grDevices::pdf(file=file.path(saveres, sprintf("auc_%s_bin_lines.pdf", "recomputed")), height=13, width=12)
par(mfrow=c(4, 4), mar=c(5, 4, 3, 2) + 0.1, cex=0.8, las=1)
for (i in drugix) {
## binarization
cc <- ifelse(drug.cytotoxic[i] == 1, auc.cytotoxic.cutoff, auc.cutoff)
auc.gdsc.common.bin <- factor(ifelse(auc.gdsc.common[i, ] > cc, "sensitive", "resistant"), levels=c("resistant","sensitive"))
auc.ccle.common.bin <- factor(ifelse(auc.ccle.common[i, ] > cc, "sensitive", "resistant"), levels=c("resistant","sensitive"))
ccix <- complete.cases(auc.gdsc.common[i, ], auc.ccle.common[i, ])
mylim <- c(0, 1)
mycol <- rep("#2B83BA", length(auc.gdsc.common.bin))
mycol[complete.cases(auc.gdsc.common.bin, auc.ccle.common.bin) & auc.gdsc.common.bin == "resistant" & auc.ccle.common.bin == "resistant"] <- gplots::col2hex("#D7191C")
mycol[complete.cases(auc.gdsc.common.bin, auc.ccle.common.bin) & auc.gdsc.common.bin == "sensitive" & auc.ccle.common.bin == "resistant"] <- gplots::col2hex("#FDAE61")
mycol[complete.cases(auc.gdsc.common.bin, auc.ccle.common.bin) & auc.gdsc.common.bin == "resistant" & auc.ccle.common.bin == "sensitive"] <- gplots::col2hex("#ABDDA4")
mysub <- NULL
myScatterPlot(x=auc.gdsc.common[i, ], y=auc.ccle.common[i, ], method=c("transparent"), transparency=0.50, pch=16, minp=50, col=mycol, xlim=mylim, ylim=mylim, main=i, cex.sub=0.7, sub=mysub, xlab="AUC GDSC", ylab="AUC CCLE")
abline(v=cc, col="grey", lty=2)
abline(h=cc, col="grey", lty=2)
## add diagonal line
abline(a=0, b=1, col="grey", lty=1, lwd=0.5)
}
## legend
plot.new()
par(mar=c(0.1, 0.1, 0.1, 0.1))
legend("center", legend=c("Both sensitive", "", "Both resistant", "", "GDSC sensitive / CCLE resistant", "", "GDSC resistant / CCLE sensitive"), col=c("#2B83BA", "white", "#D7191C", "white", "#FDAE61", "white", "#ABDDA4"), pch=16, bty="n", cex=1, pt.cex=1.5)
dev.off()
auc.recomputed.consistency <- consis[drugix, , , drop=FALSE]
## save consistency statistics
xt <- auc.recomputed.consistency[ , unlist(consistency.stats), "estimate"]
colnames(xt) <- toupper(colnames(xt))
xtable::print.xtable(xtable::xtable(xt, digits=2), include.rownames=TRUE, floating=FALSE, table.placement="!h", file=file.path(saveres, "auc_recomputed_consistency.tex"), append=FALSE)
common.clarified <- PharmacoGx::intersectPSet(pSets = list("CCLE"=common.clarified$CCLE, "GDSC"=common.clarified$GDSC), intersectOn = c("cell.lines", "drugs", "concentrations"))
common.star <- PharmacoGx::intersectPSet(pSets = list("CCLE"=common.clarified$CCLE, "GDSC"=common.clarified$GDSC), intersectOn = c("cell.lines", "drugs", "concentrations"))
methods( .getCommonConcentrationRange)
methods(.getCommonConcentrationRange)
methods(PharmacoGx::.getCommonConcentrationRange)
common.star <- PharmacoGx::intersectPSet(pSets = list("CCLE"=common.clarified$CCLE, "GDSC"=common.clarified$GDSC), intersectOn = c("cell.lines", "drugs", "concentrations"), strictIntersect=TRUE)
common.star <- PharmacoGx::intersectPSet(pSets = list("CCLE"=CCLE, "GDSC"=GDSC), intersectOn = c("cell.lines", "drugs", "concentrations"), strictIntersect=TRUE)
?intersectPSet
.getCommonConcentrationRange <- function(doses)
{
min.dose <- 0
max.dose <- 10^100
for(i in 1:length(doses))
{
min.dose <- max(min.dose, min(as.numeric(doses[[i]]), na.rm = TRUE), na.rm = TRUE)
max.dose <- min(max.dose, max(as.numeric(doses[[i]]), na.rm = TRUE), na.rm = TRUE)
}
common.ranges <- list()
for(i in 1:length(doses))
{
common.ranges[[i]] <- doses[[i]][
which.min(abs(as.numeric(doses[[i]])-min.dose)):max(
which(abs(as.numeric(doses[[i]]) - max.dose)==min(abs(as.numeric(doses[[i]]) - max.dose), na.rm=TRUE)))]
}
return(common.ranges)
}
common.star <- PharmacoGx::intersectPSet(pSets = list("CCLE"=CCLE, "GDSC"=GDSC), intersectOn = c("cell.lines", "drugs", "concentrations"), strictIntersect=TRUE)
.getCommonConcentrationRange <- function(doses)
{
min.dose <- 0
max.dose <- 10^100
for(i in 1:length(doses))
{
min.dose <- max(min.dose, min(as.numeric(doses[[i]]), na.rm = TRUE), na.rm = TRUE)
max.dose <- min(max.dose, max(as.numeric(doses[[i]]), na.rm = TRUE), na.rm = TRUE)
}
common.ranges <- list()
for(i in 1:length(doses))
{
common.ranges[[i]] <- doses[[i]][
which.min(abs(as.numeric(doses[[i]])-min.dose)):max(
which(abs(as.numeric(doses[[i]]) - max.dose)==min(abs(as.numeric(doses[[i]]) - max.dose), na.rm=TRUE)), na.rm=TRUE)]
}
return(common.ranges)
}
common.star <- PharmacoGx::intersectPSet(pSets = list("CCLE"=CCLE, "GDSC"=GDSC), intersectOn = c("cell.lines", "drugs", "concentrations"), strictIntersect=TRUE)
myf <- file.path(saveres, "PSets", "Sigs", "ccle_sig_rna_binary.RData")
ccle.sig.rna.bin <- drugSensitivitySig(pSet=CCLE.clarified, mDataType="rna", drugs=drugs, features=features[1:2], sensitivity.measure="ic50_published", molecular.summary.stat="median", sensitivity.summary.stat="median", sensitivity.cutoff=0.2, nthread=4)
ccle.sig.rna.bin <- drugSensitivitySig(pSet=CCLE.clarified, mDataType="rna", drugs=drugs, features=features[1:20], sensitivity.measure="ic50_published", molecular.summary.stat="median", sensitivity.summary.stat="median", sensitivity.cutoff=0.2, nthread=4)
